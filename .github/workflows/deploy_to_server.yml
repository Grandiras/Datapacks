# This is a basic workflow to help you get started with Actions

name: CI

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the "main" branch
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v4

      # Creates a zip file out of each of the directories in this repo (excluding directories that start with a dot)
      # Creates a zip file out of each of the directories in this repo (excluding directories that start with a dot)
      - name: Create zip files
        run: |
          for dir in $(ls -d */ | grep -v '^\..*'); do
            cd $dir
            zip -r ../${dir%/}.zip *
            cd ..
          done

      # copies the created zip files to the server under /world/datapacks
      - name: Copy zip files to server
        run: |
          for file in $(ls *.zip); do
            curl -T $file -u ${{ secrets.FTP_USERNAME }}:${{ secrets.FTP_PASSWORD }} ftp://${{ secrets.FTP_SERVER }}/world/datapacks/$file
          done

      # Install dependencies
      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y git build-essential

      # Install mcrcon
      - name: Install mcrcon
        run: |
          git clone https://github.com/Tiiffi/mcrcon.git
          cd mcrcon
          make
          sudo make install
  
      # Reload the server
      - name: Reload server
        run: |
          mcrcon -H ${{ secrets.SERVER_IP }} -P ${{ secrets.SERVER_PORT }} -p ${{ secrets.SERVER_PASSWORD }} "/reload"

      # Publish the first section of the release notes from the CHANGELOG.md file to a Discord webhook
      - name: Publish release notes
        run: |
          first_section=$(awk '/^#/{if (p) exit; p=1} p' CHANGELOG.md)
          curl -X POST -H 'Content-type: application/json' --data "{\"content\":\"${first_section}\"}" ${{ secrets.DISCORD_WEBHOOK }}
